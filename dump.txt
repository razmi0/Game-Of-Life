//   const isInside = (coordinates: { x: number; y: number }) => {
//     const { left, top } = child.getBoundingClientRect();
//     const border = { left: left, top: top };
//     if (coordinates.x > border.left && coordinates.y < border.top) return true;
//   };

// type DragElementDataType = {
//     rect: { x: number; y: number; width: number; height: number };
//     unit: string;
//     child: HTMLElement;
//   }
//   const dragElementData : DragElementDataType = {
//     rect : { x: 0, y: 0, width: 0, height: 0 },
//     unit : "px",
//     child : null
//   }

//   type MoveableDataType = {
//     initial: { x: number; y: number };
//     diff: { x: number; y: number };
//     permanentlyAdded: { x: number; y: number };
//     rect: { x: number; y: number; width: number; height: number };
//   }
//   const moveableData : MoveableDataType = {
//     initial : { x: 0, y: 0 },
//     diff : { x: 0, y: 0 },
//     permanentlyAdded : { x: 0, y: 0 },
//     rect : { x: 0, y: 0, width: 0, height: 0 }
//   }


type HeaderProps = {
  title?: string;
  subtitle?: string;
  left?: JSX.Element;
  right?: JSX.Element;
  children?: JSX.Element;
};
const Header: Component<HeaderProps> = (props) => {
  const hasTitle = !!props.title;
  const hasSubtitle = !!props.subtitle;
  const hasLeft = !!props.left;
  const hasRight = !!props.right;
  const hasChildren = !!props.children;

  return (
    <div class="flex flex-row justify-start items-center mt-3 mb-10">
      <div class="flex flex-row gap-3 items-center">
        <Show when={props.left}>{props.left}</Show>
        <div class="flex flex-col justify-start">
          <h3 class="text-dw-100 text-lg leading-none">{props.title}</h3>
          <span class="text-dw-150 text-sm">{props.subtitle}</span>
          <Show when={props.children}>{props.children}</Show>
        </div>
      </div>
      <Show when={props.right}>
        <Spacer />
        {props.right}
      </Show>
    </div>
  );
};


        {/* GROUP 3 */}
        

            {/* GROUP 2 left={<Icon width={ICON_SIZE.md} name="gear" />}*/}
        {/* label={RangeDelayLabel} hover={false} label={RangeRandomLabel} hover={false} */}

const RangeRandomLabel = (
    <div class="flex w-full">
      <span>Alive/dead ratio : </span>
      <Spacer />
      <span>{props.board.randomness + " %"}</span>
    </div>
  );

  const RangeDelayLabel = (
    <div class="flex justify-start w-full">
      <span>Delay : </span>
      <Spacer />
      <span>{props.clock.speed + " ms"}</span>
    </div>
  );

 // onMount(() => {
  //   const handleClickOutside = (e: MouseEvent) => {
  //     if (ref && !ref.contains(e.target as Node)) setIsOpen(false);
  //   };
  //   document.addEventListener("mousedown", handleClickOutside);
  //   onCleanup(() => document.removeEventListener("mousedown", handleClickOutside));
  // });